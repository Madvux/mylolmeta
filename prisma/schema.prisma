// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Champion {
  id        String  @id @default(uuid())
  league_id Int     @unique
  name      String  @unique @db.VarChar(255)
  Build     Build[]
}

model Item {
  id        String  @id @default(uuid())
  league_id Int     @unique
  name      String  @db.VarChar(255)
  Build     Build?  @relation(fields: [buildId], references: [id])
  buildId   String?
}

model Perk {
  id          String     @id @default(uuid())
  league_id   Int        @unique
  name        String     @unique @db.VarChar(255)
  key         String     @unique @db.VarChar(255)
  row         Int
  Rune        Rune       @relation(fields: [runeId], references: [id])
  runeId      String
  RuneBuild   RuneBuild? @relation(fields: [runeBuildId], references: [id])
  runeBuildId String?
}

model Rune {
  id        String @id @default(uuid())
  league_id Int    @unique
  name      String @unique @db.VarChar(255)
  perks     Perk[]
}

model RuneBuild {
  id      String  @id @default(uuid())
  Build   Build?  @relation(fields: [buildId], references: [id])
  buildId String?
  runes   Perk[]
}

model Role {
  id    String  @id @default(uuid())
  name  String  @unique @db.VarChar(10)
  Build Build[]
}

model Build {
  id         String      @id @default(uuid())
  role       Role        @relation(fields: [roleId], references: [id])
  champion   Champion    @relation(fields: [championId], references: [id])
  items      Item[]
  runes      RuneBuild[]
  roleId     String
  championId String
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt
}
